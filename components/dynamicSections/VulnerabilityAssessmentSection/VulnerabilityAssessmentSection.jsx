"use client";
import Content from "@/components/common/Content";
import React, { act, useState } from "react";
import { IoChevronBackOutline } from "react-icons/io5";
import { IoChevronForwardOutline } from "react-icons/io5";

const VulnerabilityAssessmentSection = ({
  title,
  desc,
  renderedData,
  variants = "red",
}) => {
  const [active, setActive] = useState(0);
  const [visited, setVisited] = useState(0);

  const assessmentData = renderedData[active];
  
  const outerDivColor = {
    primary: "bg-sky",
    secondary: "bg-secondary",
    red: "bg-redThree",
    transparent: "bg-transparent",
    yellow: "bg-yellowTwo",
    purple: "bg-purpleTwo",
    yellowThree: "bg-yellowThree",
    secondaryTwo: "bg-secondaryTwo",
    yellowTwo: "bg-yellowTwo",
    skyFour: "bg-skyFour",
  };
  const middleDivColor = {
    primary: "bg-sky",
    secondary: "bg-secondary",
    red: "bg-redThree",
    white: "bg-strongWhite",
    transparent: "bg-secondaryLightBG",
    yellow: "bg-yellowTwo",
    purple: "bg-purpleTwo",
    yellowThree: "bg-yellowThree",
    secondaryTwo: "bg-secondaryTwo",
    yellowTwo: "bg-yellowTwo",
    skyFour: "bg-skyFour",
  };
  const innerDivColor = {
    primary: "bg-strongWhite",
    secondary: "bg-strongWhite",
    red: "bg-strongWhite",
    white: "bg-strongWhite",
    transparent: "bg-secondaryLightBG",
    yellow: "bg-strongWhite",
    purple: "bg-strongWhite",
    yellowThree: "bg-strongWhite",
    secondaryTwo: "bg-strongWhite",
    yellowTwo: "bg-strongWhite",
    skyFour: "bg-strongWhite",
  };
  const iconColor = {
    primary: "text-sky",
    secondary: "text-secondary",
    red: "text-redThree",
    transparent: "text-lightBGText",
    yellow: "text-yellowTwo",
    purple: "text-purpleTwo",
    yellowThree: "text-yellowThree",
    secondaryTwo: "text-secondaryTwo",
    yellowTwo: "text-yellowTwo",
    skyFour: "text-skyFour",
  };
  const buttonVariants = {
    primary: "border-sky bg-sky hover:text-sky",
    secondary: "border-secondary bg-secondary hover:text-secondary",
    red: "border-redThree bg-redThree hover:text-redThree",
    yellow: "border-yellowTwo bg-yellowTwo hover:text-yellowTwo",
    purple: "border-purpleTwo bg-purpleTwo hover:text-purpleTwo",
    yellowThree: "border-yellowThree bg-yellowThree hover:text-yellowThree",
    secondaryTwo: "border-secondaryTwo bg-secondaryTwo hover:text-secondaryTwo",
    yellowTwo: "border-yellowTwo bg-yellowTwo hover:text-yellowTwo",
    skyFour: "border-skyFour bg-skyFour hover:text-skyFour",
  };
  const smallScreenTextVariants = {
    primary: "text-sky",
    secondary: "text-secondary",
    red: "text-redThree",
    yellow: "text-yellowTwo",
    purple: "text-purpleTwo",
    yellowThree: "text-yellowThree",
    secondaryTwo: "text-secondaryTwo",
    yellowTwo: "text-yellowTwo",
    skyFour: "text-skyFour",
  };
  const outerDivWidth = {
    active: "size-[136px]",
    visited: "size-[100px]",
    initial: "size-[100px]",
  };
  const middleDivWidth = {
    active: "size-[100px]",
    visited: "size-[98px]",
    initial: "size-[100px]",
  };
  const innerDivWidth = {
    active: "size-[46px]",
    visited: "size-[36px]",
    initial: "size-[36px]",
  };
  const iconWidth = {
    active: "h-[46px]",
    visited: "h-[36px]",
    initial: "h-[36px]",
  };

  const getLineStyle = (index) => {
    return index < active ? `bg-${[variants]}` : 'bg-gray-300';
  };

  console.log(active, renderedData.length)
  return (
    <div className="w:[360px] lg:w-[1200px] mx-3 md:mx-auto">
      <h6
        className={`${smallScreenTextVariants[variants]} visible  lg:hidden text-center text-base font-medium pb-2.5 `}
      >
        Our
      </h6>
      <h3
        className="font-tertiary text-xl lg:text-4xl text-lightBGText font-bold text-center"
        dangerouslySetInnerHTML={{
          __html: title ? title : "Steps For Vulnerability Assessments",
        }}
      ></h3>
      {desc && (
        <div className="flex flex-col gap-1.5 pt-4">
          {typeof desc === "string" ? (
            <Content className="text-lightBGText text-justify lg:text-center">
              {desc}
            </Content>
          ) : (
            Array.isArray(desc) &&
            desc.map((item, index) => (
              <p
                key={index}
                className="text-lightBGText text-justify lg:text-center"
              >
                {item}
              </p>
            ))
          )}
        </div>
      )}
      <div
        className={`py-8 relative hidden lg:flex items-center justify-center`}
      >
        <div className={`flex items-center justify-center`}>
          {renderedData?.map((item, index) => (
            <div
              key={index}
              className="cursor-pointer flex items-center justify-center  transition-all duration-600"
              onClick={() => {
                setActive(index);
                setVisited(index);
              }}
            >
              <div
                className={`
                ${index === active
                    ? outerDivWidth.active
                    : index <= visited
                      ? outerDivWidth.visited
                      : outerDivWidth.initial
                  } 
               rounded-full flex items-center justify-center relative z-50 
               ${index === active ? outerDivColor[variants] : index <= visited ? "bg-transparent" : "bg-transparent"}`}>
                <div
                  className={`
                     ${index === active
                      ? middleDivWidth.active
                      : index <= visited
                        ? middleDivWidth.visited
                        : middleDivWidth.initial
                    } 
                    ${index === active
                      ? middleDivColor["white"]
                      : index < active
                        ? middleDivColor["white"] && `border-2 border-${variants}`
                        : middleDivColor["transparent"]
                    } rounded-full flex items-center justify-center`}>
                  <div
                    className={`
                       ${index === active
                        ? innerDivWidth.active
                        : index <= visited
                          ? innerDivWidth.visited
                          : innerDivWidth.initial
                      } 
                       ${index === active
                        ? innerDivColor[variants]
                        : index < active
                          ? innerDivColor["white"]
                          : innerDivColor["transparent"]
                      } rounded-full flex items-center justify-center`}>
                    <div
                      className={`${index === active ? iconWidth.active : iconWidth.initial
                        }`}
                    >
                      {React.cloneElement(item?.icon, {
                        className: `
            ${index === active ? iconWidth.active : iconWidth.initial} 
            w-full ${index === active
                            ? iconColor[variants]
                            : index < active
                              ? iconColor[variants]
                              : iconColor["transparent"]
                          }`
                      })}
                    </div>
                  </div>
                </div>
              </div>
              {index < renderedData.length - 1 && (
                <div className={`w-16 h-3 ${getLineStyle(index)} transition-all duration-600`} />
              )}
            </div>
          ))}
        </div>
      </div>
      <div className="visible lg:hidden flex items-center justify-center py-5">
        <div className="w-[96px] h-[96px] bg-secondaryLightBG rounded-full flex items-center justify-center">
          <div className="w-[50px] h-[42px]">
            {React.cloneElement(assessmentData?.icon, {
              className: "h-full w-full text-lightBGText text-red",
            })}
          </div>
        </div>
      </div>

      <div className="w-[340px] lg:w-[800px] h-fit flex flex-col items-center justify-center gap-6 mx-auto">
        <h4 className="text-xl lg:text-2xl font-tertiary text-lightBGText font-bold capitalize">
          {assessmentData?.title}
        </h4>
        <Content className="text-lightBGText text-center h-[175px]">
          {assessmentData?.description}
        </Content>
        <div className="flex items-center justify-center gap-5">
          <button
            className={`border hover:bg-transparent p-2 ${active === 0 ? 'bg-transparent' : buttonVariants[variants]
              } rounded-md shadow-xl ${active === 0 ? `text-${variants}` : 'text-strongWhite'
              } active:scale-125 transition-transform duration-300 ease-in-out`}
            onClick={() => {
              setActive(active === 0 ? renderedData?.length - 1 : active - 1);
              setVisited(visited === 0 ? renderedData?.length - 1 : visited - 1);
            }}
          >
            <IoChevronBackOutline className={`text-[32px]`} />
          </button>
          <button
            className={`border hover:bg-transparent p-2 ${active === renderedData?.length - 1 ? 'bg-transparent' : buttonVariants[variants]
              } rounded-md shadow-xl ${active === renderedData?.length - 1 ? `text-${variants}` : 'text-strongWhite'
              } active:scale-125 transition-transform duration-300 ease-in-out`}
            onClick={() => {
              setActive(active === renderedData?.length - 1 ? 0 : active + 1);
              setVisited(visited === renderedData?.length - 1 ? 0 : visited + 1);
            }}
          >
            <IoChevronForwardOutline className={`text-[32px]`} />
          </button>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityAssessmentSection;
